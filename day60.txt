Problem statement
Given a singly linked list of integers, sort it using 'Bubble Sort.'

Note :
No need to print the list, it has already been taken care. Only return the new head to the list.
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
0 <= M <= 10^3
Where M is the size of the singly linked list.

Time Limit: 1sec
Sample Input 1 :
10 9 8 7 6 5 4 3 -1
Sample Output 1 :
 3 4 5 6 7 8 9 10 
 Sample Input 2 :
10 -5 9 90 5 67 1 89 -1
Sample Output 2 :
-5 1 5 9 10 67 89 90 

/*

	Following is the Node class already written for the Linked List

	class Node<T> {
    	T data;
    	Node<T> next;
    
    	public Node(T data) {
        	this.data = data;
    	}
	}

*/

public class Solution {
public static int length(Node<Integer> head){

		int l=0;
		while(head!=null){
			l++;
			head=head.next;
		}
		return l;
	}
	public static Node<Integer> bubbleSort(Node<Integer> head) {
		Node<Integer>	orginalHead= head;
		int n=length(head);
		for(int i=0;i<n-1;i++){
			Node<Integer> prev=null,curr=orginalHead;
			for(int j=0;j<n-i-1;j++){                           

				if(curr.data <=curr.next.data){

					prev=curr;
					curr=curr.next;

				}
				else{

					if(prev==null){

						Node<Integer> curr2= curr.next; 
						Node<Integer>  temp= curr2.next;
						curr2.next= curr;
						curr.next=temp;
						prev=curr2;
						orginalHead= curr2;

					}
					else{
						Node<Integer> curr2= curr.next;
						Node<Integer>  temp= curr2.next;
						prev.next=curr2;
						curr2.next=curr;
						curr.next=temp;
						prev= curr2;
					}


				}

			}

		}
		return orginalHead;


	}
}