Problem statement
You have been given a singly linked list of integers along with two integers, 'i,' and 'j.' Swap the nodes that are present at the 'i-th' and 'j-th' positions and return the new head to the list.

Note :
1. Remember, You need to swap the nodes, not only the data.
2. Indexing starts from 0.
3. No need to print the list, it has already been taken care.
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
1 <= t <= 10^2
0 <= M <= 10^5
Where M is the size of the singly linked list.
0 <= i < M
0 <= j < M

Time Limit: 1sec
Sample Input 1 :
1
3 4 5 2 6 1 9 -1
3 4
Sample Output 1 :
3 4 5 6 2 1 9 
 Sample Input 2 :
2
10 20 30 40 -1
1 2
70 80 90 25 65 85 90 -1
0 6
 Sample Output 2 :
10 30 20 40 
90 80 90 25 65 85 70 

/*

    Following is the Node class already written for the Linked List

    class Node<T> {
        T data;
        Node<T> next;
    
        public Node(T data) {
            this.data = data;
        }
    }

*/

public class Solution {

	public static Node<Integer> swapNodes(Node<Integer> head, int i, int j) {
		//Your code goes here
        Node<Integer> prev1=null,curr1=head,curr2=head,prev2=null;

		for(int k=1;k<=i;k++){
			prev1=curr1;
			curr1=curr1.next;
		}
		for(int k=1;k<=j;k++){
			prev2=curr2;
			curr2=curr2.next;
		}
		if(prev1==null){
			head=curr2;
		}
		else{
			prev1.next=curr2;
		}

		Node<Integer> temp=curr2.next;
		if(prev2!=curr1)
			curr2.next=curr1.next;
		else
			curr2.next=curr1;
		if(prev2==null){
			head=curr1;
		}
		else{
			prev2.next=curr1;
		}
		curr1.next=temp;
		return head;
	}

}